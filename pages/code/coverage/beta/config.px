<?xml version="1.0" encoding="utf-8" ?>

<page title='Configuration files' index='no'>

  <history>
<what when='20100223T201600'>new for 3.3</what>
<what when='20100725T211700'>updated for 3.4.</what>
<what when='20100824T092900'>added precision.</what>
<what when='20110604T184400'>updated for 3.5.</what>
<what when='20110827T212700'>updated for 3.5.1</what>
</history>

                <box>
                These docs are for a beta release, 3.6b3. 
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                <p>Coverage.py options can be specified in a configuration file.  This makes it
easier to re-run coverage with consistent settings, and also allows for
specification of options that are otherwise only available in the
<a class="reference internal" href="/code/coverage/beta/api.html#api"><em>API</em></a>.</p>
<p>Configuration files also make it easier to get coverage testing of spawned
sub-processes.  See <a class="reference internal" href="/code/coverage/beta/subprocess.html#subprocess"><em>Measuring subprocesses</em></a> for more details.</p>
<p>The default name for configuration files is <tt class="docutils literal"><span class="pre">.coveragerc</span></tt>, in the same
directory coverage.py is being run in.  Most of the settings in the
configuration file are tied to your source code and how it should be
measured, so it should be stored with your source, and checked into
source control, rather than put in your home directory.</p>
<h1>Syntax</h1>
<p>A coverage.py configuration file is in classic .ini file format: sections are
introduced by a <tt class="docutils literal"><span class="pre">[section]</span></tt> header, and contain <tt class="docutils literal"><span class="pre">name</span> <span class="pre">=</span> <span class="pre">value</span></tt> entries.
Lines beginning with <tt class="docutils literal"><span class="pre">#</span></tt> or <tt class="docutils literal"><span class="pre">;</span></tt> are ignored as comments.</p>
<p>Strings don&#8217;t need quotes. Multi-valued strings can be created by indenting
values on multiple lines.</p>
<p>Boolean values can be specified as <tt class="docutils literal"><span class="pre">on</span></tt>, <tt class="docutils literal"><span class="pre">off</span></tt>, <tt class="docutils literal"><span class="pre">true</span></tt>, <tt class="docutils literal"><span class="pre">false</span></tt>, <tt class="docutils literal"><span class="pre">1</span></tt>,
or <tt class="docutils literal"><span class="pre">0</span></tt> and are case-insensitive.</p>
<p>Environment variables can be substituted in by using dollar signs: <tt class="docutils literal"><span class="pre">$WORD</span></tt>
<tt class="docutils literal"><span class="pre">${WORD}</span></tt> will be replaced with the value of <tt class="docutils literal"><span class="pre">WORD</span></tt> in the environment.
A dollar sign can be inserted with <tt class="docutils literal"><span class="pre">$$</span></tt>.  Missing environment variables
will result in empty strings with no error.</p>
<p>Many sections and values correspond roughly to commands and options in
the <a class="reference internal" href="/code/coverage/beta/cmd.html#cmd"><em>command-line interface</em></a>.</p>
<p>Here&#8217;s a sample configuration file:</p>
<code lang="python"># .coveragerc to control coverage.py
[run]
branch = True

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

ignore_errors = True

[html]
directory = coverage_html_report</code>
<h1>[run]</h1>
<p>These values are generally used when running product code, though some apply
to more than one command.</p>
<p><tt class="docutils literal"><span class="pre">branch</span></tt> (boolean, default False): whether to measure
<a class="reference internal" href="/code/coverage/beta/branch.html#branch"><em>branch coverage</em></a> in addition to statement coverage.</p>
<p><tt class="docutils literal"><span class="pre">cover_pylib</span></tt> (boolean, default False): whether to measure the Python
standard library.</p>
<p><tt class="docutils literal"><span class="pre">data_file</span></tt> (string, default &#8221;.coverage&#8221;): the name of the data file to use
for storing or reporting coverage.</p>
<p><tt class="docutils literal"><span class="pre">include</span></tt> (multi-string): a list of filename patterns, the files to include
in measurement or reporting.  See <a class="reference internal" href="/code/coverage/beta/source.html#source"><em>Specifying source files</em></a> for details.</p>
<p><tt class="docutils literal"><span class="pre">omit</span></tt> (multi-string): a list of filename patterns, the files to leave out
of measurement or reporting.  See <a class="reference internal" href="/code/coverage/beta/source.html#source"><em>Specifying source files</em></a> for details.</p>
<p><tt class="docutils literal"><span class="pre">parallel</span></tt> (boolean, default False): append the machine name, process
id and random number to the data file name to simplify collecting data from
many processes.  See <a class="reference internal" href="/code/coverage/beta/cmd.html#cmd-combining"><em>Combining data files</em></a> for more information.</p>
<p><tt class="docutils literal"><span class="pre">source</span></tt> (multi-string): a list of packages or directories, the source to
measure during execution.  See <a class="reference internal" href="/code/coverage/beta/source.html#source"><em>Specifying source files</em></a> for details.</p>
<p><tt class="docutils literal"><span class="pre">timid</span></tt> (boolean, default False): use a simpler but slower trace method.
Try this if you get seemingly impossible results.</p>
<h1 id="config-paths">[paths]</h1>
<p>The entries in this section are lists of file paths that should be
considered equivalent when combining data from different machines:</p>
<code lang="python">[paths]
source =
    src/
    /jenkins/build/*/src
    c:\myproj\src</code>
<p>The names of the entries are ignored, you may choose any name that
you like.  The value is a lists of strings.  When combining data
with the <tt class="docutils literal"><span class="pre">combine</span></tt> command, two file paths will be combined
if they start with paths from the same list.</p>
<p>The first value must be an actual file path on the machine where
the reporting will happen, so that source code can be found.
The other values can be file patterns to match against the paths
of collected data.</p>
<p>See <a class="reference internal" href="/code/coverage/beta/cmd.html#cmd-combining"><em>Combining data files</em></a> for more information.</p>
<h1>[report]</h1>
<p>Values common to many kinds of reporting.</p>
<p><tt class="docutils literal"><span class="pre">exclude_lines</span></tt> (multi-string): a list of regular expressions.  Any line of
your source code that matches one of these regexes is excluded from being
reported as missing.  More details are in <a class="reference internal" href="/code/coverage/beta/excluding.html#excluding"><em>Excluding code from coverage</em></a>.  If you use this
option, you are replacing all the exclude regexes, so you&#8217;ll need to also
supply the &#8220;pragma: no cover&#8221; regex if you still want to use it.</p>
<p><tt class="docutils literal"><span class="pre">ignore_errors</span></tt> (boolean, default False): ignore source code that can&#8217;t be
found.</p>
<p><tt class="docutils literal"><span class="pre">include</span></tt> (multi-string): a list of filename patterns, the files to include
in reporting.  See <a class="reference internal" href="/code/coverage/beta/source.html#source"><em>Specifying source files</em></a> for details.</p>
<p><tt class="docutils literal"><span class="pre">omit</span></tt> (multi-string): a list of filename patterns, the files to leave out
of reporting.  See <a class="reference internal" href="/code/coverage/beta/source.html#source"><em>Specifying source files</em></a> for details.</p>
<p><tt class="docutils literal"><span class="pre">partial_branches</span></tt> (multi-string): a list of regular expressions.  Any line
of code that matches one of these regexes is excused from being reported as
a partial branch.  More details are in <a class="reference internal" href="/code/coverage/beta/branch.html#branch"><em>Branch coverage measurement</em></a>.  If you use this option,
you are replacing all the partial branch regexes so you&#8217;ll need to also
supply the &#8220;pragma: no branch&#8221; regex if you still want to use it.</p>
<p><tt class="docutils literal"><span class="pre">precision</span></tt> (integer): the number of digits after the decimal point to
display for reported coverage percentages.  The default is 0, displaying
for example &#8220;87%&#8221;.  A value of 2 will display percentages like &#8220;87.32%&#8221;.</p>
<p><tt class="docutils literal"><span class="pre">show_missing</span></tt> (boolean, default False): when running a summary report,
show missing lines.  See <a class="reference internal" href="/code/coverage/beta/cmd.html#cmd-summary"><em>Coverage summary</em></a> for more information.</p>
<h1 id="config-html">[html]</h1>
<p>Values particular to HTML reporting.  The values in the <tt class="docutils literal"><span class="pre">[report]</span></tt> section
also apply to HTML output, where appropriate.</p>
<p><tt class="docutils literal"><span class="pre">directory</span></tt> (string, default &#8220;htmlcov&#8221;): where to write the HTML report files.</p>
<p><tt class="docutils literal"><span class="pre">extra_css</span></tt> (string): the path to a file of CSS to apply to the HTML report.
The file will be copied into the HTML output directory.  Don&#8217;t name it
&#8220;style.css&#8221;.  This CSS is in addition to the CSS normally used, though you can
overwrite as many of the rules as you like.</p>
<p><tt class="docutils literal"><span class="pre">title</span></tt> (string, default &#8220;Coverage report&#8221;): the title to use for the report.
Note this is text, not HTML.</p>
<h1>[xml]</h1>
<p>Values particular to XML reporting.  The values in the <tt class="docutils literal"><span class="pre">[report]</span></tt> section
also apply to XML output, where appropriate.</p>
<p><tt class="docutils literal"><span class="pre">output</span></tt> (string, default &#8220;coverage.xml&#8221;): where to write the XML report.</p>


<p class='pmn pmnbot'>
    <span class='p'>&#xab;&#xa0;<i>Previous:</i> <a href="/code/coverage/beta/cmd.html" title="previous topic">Coverage command line usage</a></span>
    <span class='n'><i>Next:</i> <a href="/code/coverage/beta/source.html" title="next topic">Specifying source files</a>&#xa0;&#xbb;</span>
</p>

</page>