<?xml version="1.0" encoding="utf-8" ?>

<page title='Coverage Plugins' >

  <history>
<what when='20150124T143000'>new page.</what>
</history>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                <p>Plugins are cool.</p>
<span class="target" id="module-coverage.plugin"></span><dl class="class">
<dt id="coverage.plugin.CoveragePlugin">
<em class="property">class </em><tt class="descclassname">coverage.plugin.</tt><tt class="descname">CoveragePlugin</tt>(<em>options</em>)</dt>
<dd><p>Base class for coverage.py plugins.</p>
<dl class="method">
<dt id="coverage.plugin.CoveragePlugin.file_reporter">
<tt class="descname">file_reporter</tt>(<em>filename</em>)</dt>
<dd><p>Return the FileReporter class to use for filename.</p>
<p>This will only be invoked if <cite>filename</cite> returns non-None from
<cite>file_tracer</cite>.  It&#8217;s an error to return None.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.plugin.CoveragePlugin.file_tracer">
<tt class="descname">file_tracer</tt>(<em>filename</em>)</dt>
<dd><p>Return a FileTracer object for this file.</p>
<p>Every source file is offered to the plugin to give it a chance to take
responsibility for tracing the file.  If your plugin can handle the
file, then return a <cite>FileTracer</cite> object.  Otherwise return None.</p>
<p>There is no way to register your plugin for particular files.  This
method is how your plugin applies itself to files.  Be prepared for
<cite>filename</cite> to refer to all kinds of files that have nothing to do with
your plugin.</p>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                </dd></dl>

<dl class="method">
<dt id="coverage.plugin.CoveragePlugin.sys_info">
<tt class="descname">sys_info</tt>()</dt>
<dd><p>Return a list of information useful for debugging.</p>
<p>This method will be invoked for <tt class="docutils literal"><span class="pre">coverage</span> <span class="pre">run</span> <span class="pre">--debug=sys</span></tt>.  Your
plugin can return any information to be displayed.</p>
<p>The return value is a list of pairs: (name, value).</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="coverage.plugin.FileTracer">
<em class="property">class </em><tt class="descclassname">coverage.plugin.</tt><tt class="descname">FileTracer</tt></dt>
<dd><p>Support needed for files during the tracing phase.</p>
<p>You may construct this object from CoveragePlugin.file_tracer any way you
like.  A natural choice would be to pass the filename given to file_tracer.</p>
<dl class="method">
<dt id="coverage.plugin.FileTracer.dynamic_source_filename">
<tt class="descname">dynamic_source_filename</tt>(<em>filename</em>, <em>frame</em>)</dt>
<dd><p>Returns a dynamically computed source filename.</p>
<p>Some plugins need to compute the source filename dynamically for each
frame.</p>
<p>This function will not be invoked if <cite>has_dynamic_source_filename</cite>
returns False.</p>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                <p>Can return None if dynamic filenames aren&#8217;t needed.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.plugin.FileTracer.has_dynamic_source_filename">
<tt class="descname">has_dynamic_source_filename</tt>()</dt>
<dd><p>Does this FileTracer have dynamic source filenames?</p>
<p>FileTracers can provide dynamically determined filenames by
implementing dynamic_source_filename.  Invoking that function is
expensive. To determine whether it should invoke it, coverage.py uses
the result of this function to know if it needs to bother invoking
dynamic_source_filename.</p>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                </dd></dl>

<dl class="method">
<dt id="coverage.plugin.FileTracer.line_number_range">
<tt class="descname">line_number_range</tt>(<em>frame</em>)</dt>
<dd><p>Given a call frame, return the range of source line numbers.</p>
<p>The call frame is examined, and the source line number in the original
file is returned.  The return value is a pair of numbers, the starting
line number and the ending line number, both inclusive.  For example,
returning (5, 7) means that lines 5, 6, and 7 should be considered
executed.</p>
<p>This function might decide that the frame doesn&#8217;t indicate any lines
from the source file were executed.  Return (-1, -1) in this case to
tell coverage.py that no lines should be recorded for this frame.</p>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                </dd></dl>

<dl class="method">
<dt id="coverage.plugin.FileTracer.source_filename">
<tt class="descname">source_filename</tt>()</dt>
<dd><p>The source filename for this file.</p>
<p>This may be any filename you like.  A key responsibility of a plugin is
to own the mapping from Python execution back to whatever source
filename was originally the source of the code.</p>

                <box>
                These docs are for an ALPHA release, 4.0a1.
                For the latest released version, see <a href='/code/coverage'>coverage.py</a>.
                </box>
                </dd></dl>

</dd></dl>

<dl class="class">
<dt id="coverage.plugin.FileReporter">
<em class="property">class </em><tt class="descclassname">coverage.plugin.</tt><tt class="descname">FileReporter</tt>(<em>filename</em>)</dt>
<dd><p>Support needed for files during the reporting phase.</p>
<dl class="method">
<dt id="coverage.plugin.FileReporter.should_be_python">
<tt class="descname">should_be_python</tt>()</dt>
<dd><p>Does it seem like this file should contain Python?</p>
<p>This is used to decide if a file reported as part of the execution of
a program was really likely to have contained Python in the first
place.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.plugin.FileReporter.source">
<tt class="descname">source</tt>()</dt>
<dd><p>Return the source for the code, a Unicode string.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.plugin.FileReporter.source_token_lines">
<tt class="descname">source_token_lines</tt>()</dt>
<dd><p>Return the &#8216;tokenized&#8217; text for the code.</p>
</dd></dl>

</dd></dl>



<p class='pmn pmnbot'>
    <span class='p'>&#xab;&#xa0;<i>Previous:</i> <a href="/code/coverage/beta/api.html" title="previous topic">Coverage API</a></span>
    <span class='n'><i>Next:</i> <a href="/code/coverage/beta/contributing.html" title="next topic">Contributing to coverage.py</a>&#xa0;&#xbb;</span>
</p>

</page>