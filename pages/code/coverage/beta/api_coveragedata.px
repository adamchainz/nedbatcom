<?xml version="1.0" encoding="utf-8" ?>

<page title='The CoverageData class' index='no'>

  <span class="target" id="api-coveragedata"></span><div class="versionadded">
<p><span class="versionmodified">New in version 4.0.</span></p>
</div>
<dl class="class">
<dt id="coverage.CoverageData">
<em class="property">class </em><code class="descclassname">coverage.</code><code class="descname">CoverageData</code>(<em>debug=None</em>)<a class="headerlink" href="#coverage.CoverageData" title="Permalink to this definition">¶</a></dt>
<dd><p>Manages collected coverage data, including file storage.</p>
<p>This class is the public supported API to the data coverage.py collects
during program execution.  It includes information about what code was
executed. It does not include information from the analysis phase, to
determine what lines could have been executed, or what lines were not
executed.</p>
<div class="admonition note">
<p class="last">The file format is not documented or guaranteed.  It will change in
the future, in possibly complicated ways.  Do not read coverage.py
data files directly.  Use this API to avoid disruption.</p>
</div>
<p>There are a number of kinds of data that can be collected:</p>
<ul class="simple">
<li><strong>lines</strong>: the line numbers of source lines that were executed.
These are always available.</li>
<li><strong>arcs</strong>: pairs of source and destination line numbers for transitions
between source lines.  These are only available if branch coverage was
used.</li>
<li><strong>file tracer names</strong>: the module names of the file tracer plugins that
handled each file in the data.</li>
<li><strong>run information</strong>: information about the program execution.  This is
written during &#8220;coverage run&#8221;, and then accumulated during &#8220;coverage
combine&#8221;.</li>
</ul>
<p>Lines, arcs, and file tracer names are stored for each source file. File
names in this API are case-sensitive, even on platforms with
case-insensitive file systems.</p>
<p>To read a coverage.py data file, use <a class="reference internal" href="#coverage.CoverageData.read_file" title="coverage.CoverageData.read_file"><code class="xref py py-meth docutils literal"><span class="pre">read_file()</span></code></a>, or <a class="reference internal" href="#coverage.CoverageData.read" title="coverage.CoverageData.read"><code class="xref py py-meth docutils literal"><span class="pre">read()</span></code></a>
if you have an already-opened file.  You can then access the line, arc, or
file tracer data with <a class="reference internal" href="#coverage.CoverageData.lines" title="coverage.CoverageData.lines"><code class="xref py py-meth docutils literal"><span class="pre">lines()</span></code></a>, <a class="reference internal" href="#coverage.CoverageData.arcs" title="coverage.CoverageData.arcs"><code class="xref py py-meth docutils literal"><span class="pre">arcs()</span></code></a>, or
<a class="reference internal" href="#coverage.CoverageData.file_tracer" title="coverage.CoverageData.file_tracer"><code class="xref py py-meth docutils literal"><span class="pre">file_tracer()</span></code></a>.  Run information is available with
<a class="reference internal" href="#coverage.CoverageData.run_infos" title="coverage.CoverageData.run_infos"><code class="xref py py-meth docutils literal"><span class="pre">run_infos()</span></code></a>.</p>
<p>The <a class="reference internal" href="#coverage.CoverageData.has_arcs" title="coverage.CoverageData.has_arcs"><code class="xref py py-meth docutils literal"><span class="pre">has_arcs()</span></code></a> method indicates whether arc data is available.  You
can get a list of the files in the data with <a class="reference internal" href="#coverage.CoverageData.measured_files" title="coverage.CoverageData.measured_files"><code class="xref py py-meth docutils literal"><span class="pre">measured_files()</span></code></a>.
A summary of the line data is available from <a class="reference internal" href="#coverage.CoverageData.line_counts" title="coverage.CoverageData.line_counts"><code class="xref py py-meth docutils literal"><span class="pre">line_counts()</span></code></a>.  As with
most Python containers, you can determine if there is any data at all by
using this object as a boolean value.</p>
<p>Most data files will be created by coverage.py itself, but you can use
methods here to create data files if you like.  The <a class="reference internal" href="#coverage.CoverageData.set_lines" title="coverage.CoverageData.set_lines"><code class="xref py py-meth docutils literal"><span class="pre">set_lines()</span></code></a>,
<a class="reference internal" href="#coverage.CoverageData.set_arcs" title="coverage.CoverageData.set_arcs"><code class="xref py py-meth docutils literal"><span class="pre">set_arcs()</span></code></a>, and <a class="reference internal" href="#coverage.CoverageData.set_file_tracers" title="coverage.CoverageData.set_file_tracers"><code class="xref py py-meth docutils literal"><span class="pre">set_file_tracers()</span></code></a> methods add data, in ways
that are convenient for coverage.py.  The <a class="reference internal" href="#coverage.CoverageData.add_run_info" title="coverage.CoverageData.add_run_info"><code class="xref py py-meth docutils literal"><span class="pre">add_run_info()</span></code></a> method adds
key-value pairs to the run information.</p>
<p>To add a file without any measured data, use <a class="reference internal" href="#coverage.CoverageData.touch_file" title="coverage.CoverageData.touch_file"><code class="xref py py-meth docutils literal"><span class="pre">touch_file()</span></code></a>.</p>
<p>You write to a named file with <a class="reference internal" href="#coverage.CoverageData.write_file" title="coverage.CoverageData.write_file"><code class="xref py py-meth docutils literal"><span class="pre">write_file()</span></code></a>, or to an already opened
file with <a class="reference internal" href="#coverage.CoverageData.write" title="coverage.CoverageData.write"><code class="xref py py-meth docutils literal"><span class="pre">write()</span></code></a>.</p>
<p>You can clear the data in memory with <a class="reference internal" href="#coverage.CoverageData.erase" title="coverage.CoverageData.erase"><code class="xref py py-meth docutils literal"><span class="pre">erase()</span></code></a>.  Two data collections
can be combined by using <a class="reference internal" href="#coverage.CoverageData.update" title="coverage.CoverageData.update"><code class="xref py py-meth docutils literal"><span class="pre">update()</span></code></a> on one <code class="xref py py-class docutils literal"><span class="pre">CoverageData</span></code>,
passing it the other.</p>
<dl class="method">
<dt id="coverage.CoverageData.__init__">
<code class="descname">__init__</code>(<em>debug=None</em>)<a class="headerlink" href="#coverage.CoverageData.__init__" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a CoverageData.</p>
<p><cite>debug</cite> is a <cite>DebugControl</cite> object for writing debug messages.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.add_run_info">
<code class="descname">add_run_info</code>(<em>**kwargs</em>)<a class="headerlink" href="#coverage.CoverageData.add_run_info" title="Permalink to this definition">¶</a></dt>
<dd><p>Add information about the run.</p>
<p>Keywords are arbitrary, and are stored in the run dictionary. Values
must be JSON serializable.  You may use this function more than once,
but repeated keywords overwrite each other.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.add_to_hash">
<code class="descname">add_to_hash</code>(<em>filename</em>, <em>hasher</em>)<a class="headerlink" href="#coverage.CoverageData.add_to_hash" title="Permalink to this definition">¶</a></dt>
<dd><p>Contribute <cite>filename</cite>&#8216;s data to the <cite>hasher</cite>.</p>
<p><cite>hasher</cite> is a <code class="xref py py-class docutils literal"><span class="pre">coverage.misc.Hasher</span></code> instance to be updated with
the file&#8217;s data.  It should only get the results data, not the run
data.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.arcs">
<code class="descname">arcs</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.arcs" title="Permalink to this definition">¶</a></dt>
<dd><p>Get the list of arcs executed for a file.</p>
<p>If the file was not measured, returns None.  A file might be measured,
and have no arcs executed, in which case an empty list is returned.</p>
<p>If the file was executed, returns a list of 2-tuples of integers. Each
pair is a starting line number and an ending line number for a
transition from one line to another. The list is in no particular
order.</p>
<p>Negative numbers have special meaning.  If the starting line number is
-N, it represents an entry to the code object that starts at line N.
If the ending ling number is -N, it&#8217;s an exit from the code object that
starts at line N.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.erase">
<code class="descname">erase</code>()<a class="headerlink" href="#coverage.CoverageData.erase" title="Permalink to this definition">¶</a></dt>
<dd><p>Erase the data in this object.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.file_tracer">
<code class="descname">file_tracer</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.file_tracer" title="Permalink to this definition">¶</a></dt>
<dd><p>Get the plugin name of the file tracer for a file.</p>
<p>Returns the name of the plugin that handles this file.  If the file was
measured, but didn&#8217;t use a plugin, then &#8220;&#8221; is returned.  If the file
was not measured, then None is returned.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.has_arcs">
<code class="descname">has_arcs</code>()<a class="headerlink" href="#coverage.CoverageData.has_arcs" title="Permalink to this definition">¶</a></dt>
<dd><p>Does this data have arcs?</p>
<p>Arc data is only available if branch coverage was used during
collection.</p>
<p>Returns a boolean.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.line_counts">
<code class="descname">line_counts</code>(<em>fullpath=False</em>)<a class="headerlink" href="#coverage.CoverageData.line_counts" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a dict summarizing the line coverage data.</p>
<p>Keys are based on the filenames, and values are the number of executed
lines.  If <cite>fullpath</cite> is true, then the keys are the full pathnames of
the files, otherwise they are the basenames of the files.</p>
<p>Returns a dict mapping filenames to counts of lines.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.lines">
<code class="descname">lines</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.lines" title="Permalink to this definition">¶</a></dt>
<dd><p>Get the list of lines executed for a file.</p>
<p>If the file was not measured, returns None.  A file might be measured,
and have no lines executed, in which case an empty list is returned.</p>
<p>If the file was executed, returns a list of integers, the line numbers
executed in the file. The list is in no particular order.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.measured_files">
<code class="descname">measured_files</code>()<a class="headerlink" href="#coverage.CoverageData.measured_files" title="Permalink to this definition">¶</a></dt>
<dd><p>A list of all files that had been measured.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.read">
<code class="descname">read</code>(<em>file_obj</em>)<a class="headerlink" href="#coverage.CoverageData.read" title="Permalink to this definition">¶</a></dt>
<dd><p>Read the coverage data from the given file object.</p>
<p>Should only be used on an empty CoverageData object.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.read_file">
<code class="descname">read_file</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.read_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Read the coverage data from <cite>filename</cite> into this object.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.run_infos">
<code class="descname">run_infos</code>()<a class="headerlink" href="#coverage.CoverageData.run_infos" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the list of dicts of run information.</p>
<p>For data collected during a single run, this will be a one-element
list.  If data has been combined, there will be one element for each
original data file.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.set_arcs">
<code class="descname">set_arcs</code>(<em>arc_data</em>)<a class="headerlink" href="#coverage.CoverageData.set_arcs" title="Permalink to this definition">¶</a></dt>
<dd><p>Add measured arc data.</p>
<p><cite>arc_data</cite> is { filename: { (l1,l2): None, ... }, ...}</p>
<p>Do not call this more than once, it will not update data, it only sets
data.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.set_file_tracers">
<code class="descname">set_file_tracers</code>(<em>file_tracers</em>)<a class="headerlink" href="#coverage.CoverageData.set_file_tracers" title="Permalink to this definition">¶</a></dt>
<dd><p>Add per-file plugin information.</p>
<p><cite>file_tracers</cite> is { filename: plugin_name, ... }</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.set_lines">
<code class="descname">set_lines</code>(<em>line_data</em>)<a class="headerlink" href="#coverage.CoverageData.set_lines" title="Permalink to this definition">¶</a></dt>
<dd><p>Add executed line data.</p>
<p><cite>line_data</cite> is a dictionary mapping filenames to dictionaries:</p>
<code lang="python">{ filename: { lineno: None, ... }, ...}</code>
<p>Do not call this more than once, it will not update data, it only sets
data.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.touch_file">
<code class="descname">touch_file</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.touch_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that <cite>filename</cite> appears in the data, empty if needed.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.update">
<code class="descname">update</code>(<em>other_data</em>, <em>aliases=None</em>)<a class="headerlink" href="#coverage.CoverageData.update" title="Permalink to this definition">¶</a></dt>
<dd><p>Update this data with data from another <cite>CoverageData</cite>.</p>
<p>If <cite>aliases</cite> is provided, it&#8217;s a <cite>PathAliases</cite> object that is used to
re-map paths to match the local machine&#8217;s.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.write">
<code class="descname">write</code>(<em>file_obj</em>)<a class="headerlink" href="#coverage.CoverageData.write" title="Permalink to this definition">¶</a></dt>
<dd><p>Write the coverage data to <cite>file_obj</cite>.</p>
</dd></dl>

<dl class="method">
<dt id="coverage.CoverageData.write_file">
<code class="descname">write_file</code>(<em>filename</em>)<a class="headerlink" href="#coverage.CoverageData.write_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Write the coverage data to <cite>filename</cite>.</p>
</dd></dl>

</dd></dl>



<p class='pmn pmnbot'>
    <span class='p'>&#xab;&#xa0;<i>Previous:</i> <a href="/code/coverage/beta/api_coverage.html" title="previous topic">The Coverage class</a></span>
    <span class='n'><i>Next:</i> <a href="/code/coverage/beta/plugins.html" title="next topic">Plugins</a>&#xa0;&#xbb;</span>
</p>

</page>