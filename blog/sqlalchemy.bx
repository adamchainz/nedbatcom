<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20060529T124302'>
<title>SQLAlchemy</title>
<category>python</category>
<category>db</category>
<via />
<body>
<p>Now that I'm building a serious db-backed site with Python, I have a
better appreciation for what database mapping packages are like.  I'm using
Django (pre-magic-removal for the moment), and am already bumping up against
the limitations of the object relational mapper (ORM).
</p>

<p>So I was impressed to see <a href='http://www.sqlalchemy.org/'>SQLAlchemy</a>'s
philosophy statement:</p>

<quote><p>SQL databases behave less and less like object collections 
the more size and performance start to matter; 
object collections behave less and less like tables and rows 
the more abstraction starts to matter. 
SQLAlchemy aims to accommodate both of these principles.</p>

<p>SQLAlchemy doesn't view databases as just collections of tables; 
it sees them as relational algebra engines. 
Its object relational mapper enables classes to be mapped against the database 
in more than one way. SQL constructs don't just select from just tables<emdash/>you 
can also select from joins, subqueries, and unions. 
Thus database relationships and domain object models can be cleanly decoupled 
from the beginning, allowing both sides to develop to their full potential.
</p></quote>

<p>We're not moving away from the Django ORM (this week), but it's good
to have an understanding of the options out there, and SQLAlchemy looks
quite promising.</p>

</body>
</entry>
</blog>
