<?xml version='1.0' encoding='utf-8'?>
<blog>


<entry when='20160527T075000'>
<title>Coverage.py 4.1</title>
<category>coverage</category>
<body>

<p><a href="https://pypi.python.org/pypi/coverage/4.1">Coverage.py 4.1</a> is
    out!</p>

<p>I'm not sure what else to say about it that I haven't said a few times in
    the last six months: branch coverage is completely rewritten, so it
    should be more accurate and more understandable.</p>

<p>The beta wasn't getting much response, so I shielded my eyes and released
    the final version a few days ago.  No explosions, so it's seems to be OK!</p>

</body>
</entry>


<entry when='20160510T170000'>
<title>Coverage.py 4.1b3 and the truth about Coverage.py</title>
<category>coverage</category>
<body>

<p>Work on Coverage.py 4.1 is continuing:
    <a href="https://pypi.python.org/pypi/coverage/4.1b3">beta 3 is available</a>.
    </p>

<p>If you haven't used any of the 4.1 betas, the big change is that branch
    coverage has been completely rewritten.  The new code produces much more
    reliable results, and has allowed me to implement things like better
    support for lambdas. Eleven bugs with branch coverage have been fixed.
    </p>

<p>The HTML report has a cool new feature, contributed by Dmitry Shishov, a map
    in the scrollbar of where the highlighted lines are, so you can quickly
    drag to where you need to look.  (By the way, there are also keyboard
    shortcuts to do that, have been for a long time!)</p>

<p>One small backward-incompatibility: if you've been using the API, and
    calling the Coverage.report function, the default for the show_missing
    parameter has changed.</p>

<p><a href="https://pypi.python.org/pypi/coverage/4.1b3">Try Coverage.py 4.1b3</a>
    and let me know what you think.</p>

<p>Now, the truth about Coverage.py: I think it could be much better.  There
    are lots of things about the internals that I don't like.  I think the
    classes could be refactored better.  Too many of the tests are integration
    tests rather than unit tests.  Too many real-world scenarios aren't covered
    by tests.  I'm not good at staying on top of the pull requests and issues.
    If you think you could help with any of this, get in touch.</p>

</body>
</entry>

<entry when='20160110T203100'>
<title>Coverage.py 4.1b1</title>
<category>coverage</category>
<body>

<p>I wasn't planning on any big features for Coverage.py 4.1, but I ended up
    making a big change. tl;dr: branch coverage is implemented differently, and
    as a result, your coverage totals are slightly different.  Try it:
    <a href="https://pypi.python.org/pypi/coverage/4.1b1">Coverage.py 4.1 beta 1</a>.
    </p>

<p>Because of Python 3.5's async and await keywords, the existing branch
    analysis based on bytecode was completely out of gas.  The code had long
    felt jury-rigged, and there were long-standing bugs that seemed impossible
    to solve.  The async features compiled very differently than their
    synchronous counterparts, and I didn't see a way to bring them into the
    bytecode fold.</p>

<p>So I ripped out the bytecode analysis and replaced it with AST (Abstract
    Syntax Tree) analysis.  I like it much better: it's based on the structure
    of the code that people see and can reason about.  Four old bugs were fixed
    as a result, along with the two or three new bugs reported on Python 3.5.</p>

<p>As a result though, coverage.py now calculates totals differently, because
    the full set of possible code paths is different.  So your results will
    likely shift a little bit, especially if you are using branch measurement.
    They might be higher, they might be lower.  For example, class docstrings
    now count as executable statements (because they are executable
    statements), and paths through "except" clauses probably were being
    overlooked.</p>

<p>Please try it out and let me know if you see anything wrong.  I won't be
    surprised if there are complex code structures that are analyzed wrong somehow.
    <a href="https://pypi.python.org/pypi/coverage/4.1b1">Coverage.py 4.1b1</a>:
    you know you want it...</p>

</body>
</entry>

</blog>
