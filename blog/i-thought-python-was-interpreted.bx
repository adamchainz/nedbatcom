<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20180324T143936' draft='y'>
<title>I thought Python was interpreted?</title>
<category></category>
<body>

<p>A common question: "Is Python compiled or interpreted?" or perhaps, "Is
there a way to compile my Python program?"</p>

<p>Usually, the asker has a simple model of the world in mind, and as is
typical, the world is more complicated.</p>

<p>In the simple model of the world, "compile" means to convert a program in a
high-level language into a binary executable full of machine code (CPU
instructions).  When you compile a C program, this is what happens.</p>

<p>But <a href='https://en.wikipedia.org/wiki/Compiler'>compiling</a> is a more
general idea: take a program in one language (or form), and convert it into
another language or form.  Usually the source form is a higher-level language
than the destination form, such as when converting from C to CPU.  But
converting from JavaScript 8 to JavaScript 5 is also a kind of compiling.  When
the languages are of a similar level, often the word "transpiling" is used.</p>

<p>What about Python? When you run a Python program, the source is compiled into
a much simpler form called <a href='https://en.wikipedia.org/wiki/Bytecode'>bytecode</a>.
These are instructions similar to CPU instructions, but instead of being
executed by the CPU, they are executed by software called a virtual
machine.</p>

<p>Here's an example of a short Python function, and its bytecode:</p>

<code lang="pycon"><![CDATA[
>>> import dis
>>> def example(x):
...     for i in range(x):
...         print(2 * i)
...
>>> dis.dis(example)
  2           0 SETUP_LOOP              28 (to 30)
              2 LOAD_GLOBAL              0 (range)
              4 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              8 GET_ITER
        >>   10 FOR_ITER                16 (to 28)
             12 STORE_FAST               1 (i)

  3          14 LOAD_GLOBAL              1 (print)
             16 LOAD_CONST               1 (2)
             18 LOAD_FAST                1 (i)
             20 BINARY_MULTIPLY
             22 CALL_FUNCTION            1
             24 POP_TOP
             26 JUMP_ABSOLUTE           10
        >>   28 POP_BLOCK
        >>   30 LOAD_CONST               0 (None)
             32 RETURN_VALUE
>>>
]]></code>

<p>The <a href='https://docs.python.org/3/library/dis.html'>dis</a> module in
the Python standard library is the disassembler that can show you Python
bytecode.  It's also the best (but not great) documentation for the bytecode
itself.</p>

<p>An important aspect of Python's compilation to bytecode is that it's
entirely implicit.  You never invoke a compiler, you simply run a .py file.
The Python implementation compiles the files as needed.  This is different than
Java, for example, where you have to run the Java compiler to turn Java source
into compiled class files.  For this reason, Java is thought of as a compiled
language, and Python is often called an interpreted language.  But both compile
to bytecode, and then the bytecode is run by software.</p>

<p>When you import a file in Python, the .py file is compiled into bytecode,
and the bytecode is saved in a .pyc file.</p>

<p>Another difference between Java and Python is that Python provides an
interactive prompt where you can type Python statements and have them
immediately executed.  This interactivity is missing in "compiled" languages,
but even at the interactive prompt, your Python is compiled to bytecode, and
then the bytecode is executed.</p>

<h1>What if I want to compile my Python?</h1>

<p>If you mean you want to convert Python code into an executable full of
machine code, you can't quote do that.  But depending on why you wanted that,
there are other options:</p>

<ul>

<li><i>I want my code to run faster.</i> First, try running with PyPy. Then you
can explore options like Cython.</li>

<li><i>I want to run my code on a machine that doesn't have Python
installed.</i>  Use pyinstaller to bundle your program together with a Python
interpreter.</li>

<li><i>I want to hide my source code.</i>  Think hard about what secrets you
are trying to protect, and how badly people want to get the secrets.  Probably
the best you can do is use Cython to turn your Python into C, which is
compiled.</li>

<li><i>I want smaller files.</i>  File size really probably isn't an issue any
more, don't worry about it.</li>

</ul>

<!--
<p>
- "scripting" language
- language vs implementation
- why people want compilation
    - faster execution
    - no need for python on the destination
    - obfuscation
    - smaller deliverables

It's also typical that adjectives used
to describe programming languages are not binary, they are a spectrum, or have
nuances that need to be considered.</p>
-->

</body>
</entry>
</blog>
