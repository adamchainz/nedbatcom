<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20130827T202000'>
<title>Names and values: making a game board</title>
<category>python</category>
<body>

<!--[[[cog
    from helpers.graphy import CogGraphviz, tutor_a_tag
    CogGraphviz.we_are_here('blog', 'gameboard_dot')
]]]-->
<!--[[[end]]]-->

<p>In <apage pref='text/names.px'/>, I described how Python's names and values
    work.  There I posed some other questions, one of which was:</p>

<box>Why do beginners find it hard to make a tic-tac-toe board in Python?</box>

<p>Writing a game often involves a grid-like board.  Python doesn't have a
    native two-dimensional array, so you can use a list of lists.  Making a
    checkerboard full of zeros can be done with a literal list:</p>

<code lang="py"><![CDATA[
board = [
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
]
]]></code>

<p>But that's tedious, especially if you need a 100<times/>100 board. Even if
    you don't, it seems like you could do it more compactly.  Python lets you
    multiply lists by integers to replicate elements, so you can use this code
    to produce a list of eight zeros:</p>

<code lang="py"><![CDATA[
row = [0] * 8
]]></code>

<p>Let's try using that technique twice, once to make a row, and then again to
    fill out the board:</p>

<code lang="py"><![CDATA[
# Construct the empty board
board = [ [0]*8 ] * 8
pprint(board)
]]></code>

<code><![CDATA[
[[0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0]]
]]></code>

<p>It works!  Now let's change one of the cells:</p>

<code lang="py"><![CDATA[
# Put a 1 in the upper-left corner
board[0][0] = 1
pprint(board)
]]></code>

<code><![CDATA[
[[1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0]]
]]></code>

<p>Huh? Somehow setting one cell changed the first cell in every row!? What's
    going on?</p>

<p>Just as with assignment, list multiplication doesn't copy data
    (<a href="/text/names.html#no_copies">Fact: assignment never copies
    data</a>.) When we replicate a list with multiplication, we get the same
    value referenced many times.  When we made the single row, we made a
    list with eight references to the same zero:</p>

<figurep>
    <!--[[[cog
    g = CogGraphviz()
    g.codelabel("row = [0] * 8")
    g.dot("""
        row [NAMEATTRS]
        { rank="same"
        X [style="invis"]
        0 [INTATTRS]
        }
        list1 [shape=record, label="{<0>|<1>|<2>|<3>|<4>|<5>|<6>|<7>}"]
        row -> list1:0
        list1:0:s -> 0
        list1:1:s -> 0
        list1:2:s -> 0
        list1:3:s -> 0
        list1:4:s -> 0
        list1:5:s -> 0
        list1:6:s -> 0
        list1:7:s -> 0
        list1:7:e -> X [label="", style="invis", weight=20]
        X -> 0 [label="", style="invis"]
        """)
    g.img(alt="row is a list with eight references to the same zero") 
    ]]]-->
    <img src="blog/gameboard_dot/d000.png" alt="row is a list with eight references to the same zero" align="top" scale="0.5"/>
    <!--[[[end]]]-->
</figurep>

<p>When we make the board, the same behavior of replicating a list applies, so the board is
    actually eight references to the same list:</p>

<figurep>
    <!--[[[cog
    g = CogGraphviz()
    g.codelabel("board = [ [0]*8 ] * 8")
    g.dot("""
        board [NAMEATTRS]
        list1 [shape=record, label="{<0>|<1>|<2>|<3>|<4>|<5>|<6>|<7>}"]
        {
            rankdir=LR;
            rank="same";
            list2 [shape=record, label="{<0>|<1>|<2>|<3>|<4>|<5>|<6>|<7>}"]
        }
        board -> list2:0
        {
            rankdir=LR;
            rank="same";
            X [style="invis"]
            0 [INTATTRS]
        }
        list1:0:s -> 0
        list1:1:s -> 0
        list1:2:s -> 0
        list1:3:s -> 0
        list1:4:s -> 0
        list1:5:s -> 0
        list1:6:s -> 0
        list1:7:s -> 0

        list2:0:s -> list1:0
        list2:1:s -> list1:0
        list2:2:s -> list1:0
        list2:3:s -> list1:0
        list2:4:s -> list1:0
        list2:5:s -> list1:0
        list2:6:s -> list1:0
        list2:7:s -> list1:0
        list1:7:e -> X [label="", style="invis", weight=20]
        X -> 0 [label="", style="invis"]
        """)
    g.img(alt="row is a list with eight references to the same zero") 
    ]]]-->
    <img src="blog/gameboard_dot/d001.png" alt="row is a list with eight references to the same zero" align="top" scale="0.5"/>
    <!--[[[end]]]-->
</figurep>

<p>(BTW: if you know how to make graphviz draw diagrams with more manual
    control, I'd love to hear from you...)</p>

<p>When we assign to board[0][0], we are changing one element, but that element is visible through
    all eight rows, because all eight rows are actually references to the same list:</p>

<figurep>
    <!--[[[cog
    g = CogGraphviz()
    g.codelabel("board[0][0] = 1")
    g.dot("""
        board [NAMEATTRS]
        list1 [shape=record, label="{<0>|<1>|<2>|<3>|<4>|<5>|<6>|<7>}"]
        list2 [shape=record, label="{<0>|<1>|<2>|<3>|<4>|<5>|<6>|<7>}"]
        board -> list2:0
        subgraph nums {
            rankdir=LR;
            rank="same";
            X [style="invis"]
            0 [INTATTRS]
            1 [INTATTRS]
            }
        list1:0:s -> 1 [weight=10]
        list1:1:s -> 0
        list1:2:s -> 0
        list1:3:s -> 0
        list1:4:s -> 0
        list1:5:s -> 0
        list1:6:s -> 0
        list1:7:s -> 0
        list1:7:e -> X [label="", style="invis", weight=20]
        list2:0:s -> list1:0
        list2:1:s -> list1:0
        list2:2:s -> list1:0
        list2:3:s -> list1:0
        list2:4:s -> list1:0
        list2:5:s -> list1:0
        list2:6:s -> list1:0
        list2:7:s -> list1:0
        X -> 0 [label="", style="invis"]
        0 -> 1 [label="", style="invis"]
        """)
    g.img(alt="row is a list with eight references to the same zero") 
    ]]]-->
    <img src="blog/gameboard_dot/d002.png" alt="row is a list with eight references to the same zero" align="top" scale="0.5"/>
    <!--[[[end]]]-->
</figurep>

<p>In Facts and Myths, I called this the <a href="/text/names.html#presto_chango">Mutable Presto-Chango</a>.</p>

<p>Perhaps this is clearer if you consider that these two ways to make the board
    are exactly the same:</p>

<code lang="py"><![CDATA[
# Make it all at once
board = [ [0] * 8 ] * 8

# Make a row, then make a board
row = [0] * 8
board = [ row ] * 8
]]></code>

<p>Assigning the row to its own variable doesn't change the behavior, but when
    we see it assigned to a name, it's more obvious that you'll get eight
    references to the same row.</p>

<p>OK, but why didn't setting one element change all 64 zeros?  The diagram
    shows that there's only one zero, referenced by all the elements of the
    board.</p>

<p>Two names can refer to the same value.  In fact, in our case, eight names
    refer to the same value.  The names are board[0][0], board[0][1], ...,
    board[0][7].  Changing one of those names to refer to 1 won't make all of
    them refer to it, any more than if the eight names had been "a", "b", ...,
    "h".  (<a href="/text/names.html#reassign">Fact: Names are reassigned
    independently of other names</a>.)</p>

<p>The compact way to make a board that works correctly is to use a list
    comprehension to make each row:</p>

<code lang="py"><![CDATA[
board = [ [0] * 8 for i in range(8) ]
]]></code>

<p>With this code, we use [0]*8 to make the row, which is fine because
    assignment will correctly update a single element in that row.  The list
    comprehension makes a list with eight of those, but instead of each one
    being a reference to the same row, the row is recomputed each time, so a
    new list is made for each row.</p>

<p>It's important to keep straight two different syntaxes that look very
    similar:</p>

<code lang="py"><![CDATA[
# List multiplication, doesn't work right:
board1 = [ [0] * 8 ] * 8

# List comprehension, does work right:
board2 = [ [0] * 8 for i in range(8) ]
]]></code>

<p>In the first case, [0]*8 is calculated once, placed into a one-element list,
    and then replicated 8 times, giving 8 references to the same row.  In the
    second case, [0]*8 is the expression in the list comprehension, and so is
    evaluated anew eight times, producing eight distinct lists to serve as our
    rows.</p>

<p>If this is still confusing, <apage pref='text/names.px'/> has more details, or 
<!--[[[cog
tutor_a_tag("""\
# List multiplication, doesn't work right:
board1 = [ [0] * 8 ] * 8
board1[0][0] = 1

# List comprehension, does work right:
board2 = [ [0] * 8 for i in range(8) ]
board2[0][0] = 1
""")
]]]-->
<a href='http://pythontutor.com/visualize.html#code=%23%20List%20multiplication%2C%20doesn%27t%20work%20right%3A%0Aboard1%20%3D%20%5B%20%5B0%5D%20%2A%208%20%5D%20%2A%208%0Aboard1%5B0%5D%5B0%5D%20%3D%201%0A%0A%23%20List%20comprehension%2C%20does%20work%20right%3A%0Aboard2%20%3D%20%5B%20%5B0%5D%20%2A%208%20for%20i%20in%20range%288%29%20%5D%0Aboard2%5B0%5D%5B0%5D%20%3D%201%0A&amp;mode=display&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2' target='_blank'>
<!--[[[end]]]-->
try the code on pythontutor.com</a>.</p>


</body>
</entry>
</blog>
