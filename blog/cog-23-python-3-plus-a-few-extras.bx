<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20120227T193412'>
<title>Cog 2.3: Python 3 plus a few extras</title>
<category>cog</category>
<body>

    <p>PyCon is nearly upon us, which means I am preparing slides for <a href='https://us.pycon.org/2012/schedule/presentation/141/'>my talk</a>, 
        which means I am using Cog again.  <a href='http://nedbatchelder.com/code/cog/'>Cog</a> 
        runs bits of Python code in a text file, and interpolates the output of
        the code into the file.  It's useful for writing small programs to augment
        text, in this case, to produce code output in my HTML file.</p>
    
    <p>This year I needed some Python 3 examples, so the biggest change in 
        Cog v2.3 is that it is runnable on Python 3.  I also took the opportunity
        to drop support for Pythons older than 2.6.</p>

    <p>Having both Python 2 and Python 3 examples in one file means I need to
        run it through Cog twice, once under each version of Python.  But when
        running in Python 2, I need the Python 3 examples to stay as they are.
        So I added a new attribute to the cog module, cog.previous.  This is
        simply a string containing the output from the last run of Cog.  A code
        chunk can now decide to "do nothing" simply by outputting
        cog.previous.</p>

    <p>A few other mini-features are in: a dash as a file name means process 
        standard in, and Cog can be run as "python -m cogapp," which helped
        my 2 vs. 3 switcheroo.</p>

    <p><a href='http://pypi.python.org/pypi/cogapp/2.3'>Enjoy Cog 2.3</a>.</p>

</body>
</entry>
</blog>
