<?xml version='1.0' encoding='utf-8'?>
<blog>

<entry when='20150117T071454'>
<title>Coverage.py for Django templates</title>
<category>coverage</category>
<category>django</category>
<body>

<p>A long experiment has come to fruition: coverage.py support for Django
    templates.  I've added plugin support to coverage.py, and implemented a
    plugin for Django templates.  If you want to try it in its current alpha
    state, read on.</p>

<p>The plugin itself is pip installable:</p>

<code><![CDATA[
$ pip install django_coverage_plugin
]]></code>

<p>To run it, add these settings to your .coveragerc:</p>

<code lang="python"><![CDATA[
[run]
# Makes it slower, won't be needed eventually
timid = True

plugins =
    django_coverage_plugin
]]></code>

<p>Then run your tests under coverage.py.  It requires coverage.py >= 4.0a2, so
    it may not work with other coverage-related tools such as test-runner
    coverage plugins, or coveralls.io.  The plugin works on Django >= 1.4, and
    Python 2 or 3.</p>

<p>You will see your templates listed in your coverage report alongside your
    Python modules. They have a .html extension but no directory, that's still
    to be fixed.</p>

<p>The technique used to measure the coverage is the same that Dmitry Trofimov
    used in dtcov, but integrated into coverage.py as a plugin, and made more
    performant.  I'd love to see how well it works in a real production
    project.  If you want to help me with it, feel free to
    <a href="mailto:ned@nedbatchelder.com">drop me an email</a>.</p>

<p>The coverage.py plugin mechanism is designed to be generally useful for
    hooking into the collection and reporting phases of coverage.py,
    specifically to support non-Python files.  I've also got a plugin for Mako
    templates, but it needs some fixes from Mako.  If you have non-Python files
    you'd like to support in coverage.py, let's talk.</p>

</body>
</entry>

<entry when='20150120T211900'>
<title>Coverage.py 4.0a3</title>
<category>coverage</category>
<body>

<p>Lots of things happening in coverage.py world these days.  Turns out I broke
    the XML report a long time ago, so that directories were not reported as
    packages.  I honestly don't know why I let that sit for so long.  It's
    fixed now, but I feel bad that I've ignored people's bug reports and pull
    requests. I'll try to be more responsive.</p>

<p>The fix is in <a href="https://pypi.python.org/pypi/coverage/4.0a3">coverage.py v4.0a3</a>.
    Also, the reports now use file names instead of a weird hybrid.  Previously,
    the file "a/b/c.py" was reported as "a/b/c".  Now it is shown as "a/b/c.py".
    This works better where non-Python files can be reported, so we can't assume
    the extension is .py.</p>

<p>Oh, did I mention that now you can
    <a href="/blog/201501/coveragepy_for_django_templates.html">coverage-measure
    your Django templates</a>?</p>

<p>Also in the XML report, there's now a configuration setting to determine
    the directory depth that will be reported as packages.  The default is that
    all directories will be reported as packages, but if you set the depth to 2,
    then only the upper two layers of directories will be reported.</p>

<p>Try <a href="https://pypi.python.org/pypi/coverage/4.0a3">coverage.py v4.0a3</a>.</p>

</body>
</entry>

</blog>
