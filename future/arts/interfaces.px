<?xml version="1.0"?>
<page title='Interfaces'>

<p>The most important concept in designing software systems is the interface.
It is the construct that allows a divide-and-conquer approach to building large systems.
</p>

<p>The term "object-oriented programming" (or OOP) is well overused these days, and means different
things to different people.  In my opinion, the most important aspect of OOP is the realization
that the behavior of objects are their most important characteristic, and that different classes
can behave the same as far as external callers are concerned.
</p>

<p>At the heart of this design technique is treating interfaces themselves as first-class
citizens, as independent as possible from the classes that support or use the interfaces.
Java did a wonderful thing by creating interfaces as a language construct in their own right,
but you don't need explicit language support to acheive the benefits of interface-centered design.
</p>

<p>Following Java's lead, an interface is a definition of a set of methods, and nothing more.
There are no implementations, there are no data members.  There are just semantics of methods.
To get the most from interfaces, it pays to put extra effort into thinking about precisely
what the semantics of the methods are.
</p>

<p>Other terms have been used for this idea.
"Polymorphic programming" explicitly gets at the concept that differently shaped ("polymorphic")
objects can be treated uniformly.
"Design By Contract" focuses on the fact that method semantics are an agreement between the
caller and the implementer about precisely what each can expect from the other.
</p>

<!--
- Interfaces are the key to modular construction.
- Java's best advance was the interface keyword.
- The important thing is to get the interface right, 
  then the implementation can be as crappy as it needs to be for short-term concerns.
- There are more callers than there are implementers.
- Some interfaces are the other way around.
- Don't promise more than you want to.
- Keep interface semantics as minimal as possible.
- Don't be afraid to use "undefined".
-->
</page>
